opAssignment =
opEqual ==
opIdentical ===
opLogicalNot !
opBitwiseNot ~
opNotEqual !=
opNotIdentical !==
opPatternMatch ~=
opPlus +
opPlusPlus ++
opPlusAssign +=
opMinus -
opMinusMinus --
opMinusAssign -=
opMultiply *
opMultiplyAssign *=
opExponential **
opExponentialAssign **=
opDivide /
opDivideAssign /=
opRemainder %
opRemainderAssign %=
opLess <
opLessOrEqual <=
opMore >
opMoreOrEquals >=
opBitwiseAnd &
opBitwiseAndAssign &=
opBitwiseOr |
opBitwiseOrAssign |=
opLogicalAnd &&
opLogicalAndAssign &&=
opLogicalOr ||
opLogicalOrAssign ||=
opLeftBitShift <<
opLeftBitShiftAssign <<=
opRightBitShift >>
opRightBitShiftAssign >>=
opBitwiseXOR ^
opMultiplyIgnoringOverflow &*
opDivideIgnoringOverflow &/
opRemainderIgnoringOverflow &%
opPlusWithOverflow &+
opMinusWithOverflow &-
opComment //
opCommentsOpen /*
opCOmmentsClose */
opDot .
opComma ,
opSemicolon ;
opGraveAccent `
opDollarSign $
opFuncType ->
opClosedRange ...
opHalfClosedRange ..<
opTernaryCondIf ?
opTernaryCondElse :
opNilCoalescing ??
opTypeCheck is
opTypeCast as
opTypeCastConditional as?
opTypeCastForced as!
symbOpeningBracket (
symbClosingBracket )
symbOpeningSquareBracket [
symbClosingSquareBracket ]
symbOpeningCurlyBracket {
symbClosingCurlyBracket }
symbStringLiteral "
symbMultilineStringLiteral """
symbBackSlash \
symbNullChar \0
symbBackslashItself \\
symbHorizontalTab \t
symbLineFeed \n
symbCarriageReturn \r
symbDoubleQuote \"
symbSingleQuote \'
symbUnicodeChar \u
symbExtendedDelimiter #
symbAttribute @
kwSome some
kwType Type
kwAny Any
kwFor for
kwIn in
kwLet let
kwVar var
kwWhere where
kwTrue true
kwFalse false
kwNil nil
kwRepeat repeat
kwWhile while
kwDo do
kwContinue continue
kwBreak break
kwFallthrough fallthrough
kwGuard guard
kwUnderscore _
kwIf if
kwNumberSignIf #if
kwElse else
kwNumberSignElse #else
kwElseif elseif
kwNumberSignElseif #elseif
kwEndif endif
kwNumberSignEndif #endif
kwNumberSignSourceLocation #sourceLocation
kwNumberSignError #error
kwNumberSignWarning #warning
kwNumberSignAvailable #available
kwNumberSignColorLiteral #colorLiteral
kwNumberSignColumn #column
kwNumberSignFile #file
kwNumberSignFileLiteral #fileLiteral
kwNumberSignFunction #function
kwNumberSignLine #line
kwNumberSignImageLiteral #imageLiteral
kwNumberSignSelector #selector
kwEnum enum
kwIndirect indirect
kwSwitch switch
kwCase case
kwDefault default
kwThrow throw
kwThrows throws
kwRethrows rethrows
kwProtocol protocol
kwAssociatedtype associatedtype
kwTypealias typealias
kwAtObjc @objc
kwAtObjcMembers @objcMembers
kwSelf self
kwUpperSelf Self
kwConvenience convenience
kwInit init
kwInit! init!
kwInit? init?
kwDeinit deinit
kwTry try
kwTryOptional try?
kwTryForced try!
kwCatch catch
kwReturn return
kwDefer defer
kwImport import
kwStruct struct
kwSuper super
kwClass class
kwFunc func
kwFinal final
kwDynamic dynamic
kwLazy lazy
kwOptional optional
kwRequired required
kwWeak weak
kwUnowned unowned
kwUnownedSafe unowned(safe)
kwUnownedUnsafe unowned(unsafe)
kwOpen open
kwOpenSet open(set)
kwPublic public
kwPublicSet public(set)
kwInternal internal
kwInternalSet internal(set)
kwFileprivate fileprivate
kwFileprivateSet fileprivate(set)
kwPrivate private
kwPrivateSet private(set)
kwMutating mutating
kwNonmutating nonmutating
kwStatic static
kwLeft left
kwRight right
kwNone none
kwOverride override
kwInout inout
kwPrecedencegroup precedencegroup
kwPrecedence precedence
kwAssociativity associativity
kwAssignment assignment
kwHigherThan higherThan
kwLowerThan lowerThan
kwPrefix prefix
kwPostfix postfix
kwInfix infix
kwOperator operator
kwGet get
kwSet set
kwWillSet willSet
kwDidSet didSet
kwExtension extension
kwSubscript subscript
kwFile file
kwLine line
kwOs os
kwArch arch
kwSwift swift
kwCompiler compiler
kwCanImport canImport
kwTargetEnvironment targetEnvironment
kwMacOS macOS
kwIOS iOS
kwWatchOS watchOS
kwTvOS tvOS
kwI386 i386
kwX86_64 x86_64
kwArm arm
kwArm64 arm64
kwSimulator simulator
kwIOSApplicationExtension iOSApplicationExtension
kwMacOSApplicationExtension macOSApplicationExtension
kwMacCatalyst macCatalyst